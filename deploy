#!/bin/bash

# VARIABLES ======================================

DOTFILES_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
DIR_PROJ=~/Projects
DIR_VIMCONFIG=~/.config/nvim
FILE_VIMINIT=$DIR_VIMCONFIG/init.vim
DIR_VIMPLUGINS=$DIR_VIMCONFIG/plugged
DIR_RANGER=~/.config/ranger
DIR_NNN=~/.config/nnn
DIR_LF=~/.config/lf
DIR_ZSHPLUGINS=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins
DIR_VISCONFIG=~/.config/vis
DIR_NEWSBOAT=~/.config/newsboat
DIR_STARSHIP=~/.config
DIR_MUTT=~/.config/mutt

# HELPERS ========================================

function echo-debug { echo "$@" | sed -e "s%$HOME%~%g" -e "s%$DOTFILES%.%g"; }
function echo-info  { printf "\r\033[2K\033[0;34m[ .. ]\033[0m %s\n" "$*"; }
function echo-skip  { printf "\r\033[2K\033[38;05;240m[SKIP]\033[0m %s\n" "$*"; }
function echo-ok    { printf "\r\033[2K\033[0;32m[ OK ]\033[0m %s\n" "$*"; }
function echo-fail { printf "\r\033[2K\033[0;31m[FAIL]\033[0m %s\n" "$*"; }
function echo-custom { printf "\n\r\033[2K\033[0;33m[$1]\033[0m %s\n" "$2"; }


# FUNCTIONS ======================================

# Clones a git repo to the target directory
# USAGE: do-clone targetdir url name
function do-clone {
    #echo-debug "    Folder: $1"
    #echo-debug "       URL: $2"
    #echo-debug "      Name: $3"
    if [ ! -d $1 ]; then
        echo-info "Installing $3"
        git clone $2 $1
        echo-ok "Done"
    elif [ -d $1/.git ]; then
        echo-info "Updating $3"
        git --work-tree=$1 --git-dir=$1/.git pull origin master
        echo-ok "Done"
    else
        echo-skip "$3"
    fi
}

# Pulls a file from curl and puts them into a specific location
# If the directory where target is does not exist, it is created
# USAGE: do-curl-fetchfile target url name
function do-curl-fetchfile {
    #echo-debug "    Target: $1"
    #echo-debug "       URL: $2"
    #echo-debug "      Name: $3"
    if [ ! -f $1 ]; then
        echo-info "Installing $3"
        LOCATION=$(dirname "${1}")
        mkdir -p "$LOCATION" 
        curl -LSso $1 $2
        echo-ok "Done" else
        echo-skip "$3"
    fi
}

# Does a symlink between target and link_name, deleting it if it exists
# USAGE: do-symlink target link_name
function do-symlink {
    #echo-debug "    Target: $1"
    #echo-debug " Link name: $2"
    echo-info "Symlink: $2 -> $1"
    # Remove link if exists
    if [ -L $2 ]; then
        rm $2
    fi
    if [ -d $2 ]; then
        rm -rf $2
    fi
    # Create parent directory of link if necessary
    mkdir -p "$(dirname "$2")"
    ln -s $1 $2
}

# Sources a shell file in the given shell's rc file, if it is not there yet
# USAGE: do-source shell file
function do-source {
    #echo-debug "      Shell: $1"
    #echo-debug "       File: $2"
    if [ -x "$(command -v $1)" ]; then
        CONF=~/.$1rc
        FILENAME=$(basename "$2")
        # If file not yet sourced, source it
        if ! grep -q $FILENAME $CONF
        then
            echo-info "$2: $CONF"
            echo -e "\n# Auto source $FILENAME\nif [ -f $2 ]; then\n\tsource $2\nfi" >> $CONF
        else
            echo-skip "$1"
        fi
    fi
}

# START ===================================

#
# VIM
#
echo-custom " ** " "==== NEOVIM ===="

# Install plugin manager
do-curl-fetchfile "$DIR_VIMCONFIG"/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim plug.vim

# Install color schemes
do-clone "$DIR_VIMCONFIG"/colors https://github.com/flazz/vim-colorschemes.git vim-colorschemes
mv $DIR_VIMCONFIG/colors/colors/* $DIR_VIMCONFIG/colors
mv $DIR_VIMCONFIG/colors/scripts $DIR_VIMCONFIG/

# Create vim.init symlink
do-symlink $DOTFILES_PATH/vim/init.vim $FILE_VIMINIT

# Create dictionary symlink
do-symlink $DOTFILES_PATH/vim/en.utf-8.add $DIR_VIMCONFIG/spell/en.utf-8.add

#
# RANGER
#
echo-custom " ** " "==== RANGER ===="

if [ ! -d "$DIR_RANGER" ]; then
    mkdir -p $DIR_RANGER
fi

# Create scope.sh and rc.conf symlinks
do-symlink $DOTFILES_PATH/ranger/scope.sh $DIR_RANGER/scope.sh
do-symlink $DOTFILES_PATH/ranger/rc.conf $DIR_RANGER/rc.conf
do-symlink $DOTFILES_PATH/ranger/rifle.conf $DIR_RANGER/rifle.conf

#
# NNN
#
echo-custom " ** " "==== NNN ===="

if [ ! -d "$DIR_NNN" ]; then
    mkdir -p $DIR_NNN
fi

# Create nnn config symlink
do-symlink $DOTFILES_PATH/nnn $DIR_NNN

#
# LF
#
echo-custom " ** " "==== LF ===="

# Create nnn config symlink
do-symlink $DOTFILES_PATH/lf $DIR_LF

#
# zsh-autosuggestions and zsh-syntax-highlighting
#
echo-custom " ** " "==== ZSH-AUTOSUGGESTIONS ===="
do-clone "$DIR_ZSHPLUGINS"/zsh-autosuggestions https://github.com/zsh-users/zsh-autosuggestions zsh-autosuggestions
echo-custom " ** " "==== ZSH-SYNTAX-HIGHLIGHTING ===="
do-clone "$DIR_ZSHPLUGINS"/zsh-syntax-highlighting https://github.com/zsh-users/zsh-syntax-highlighting zsh-syntax-highlighting
#
# SHELL ENVIRONMENT
#
echo-custom " ** " "==== SHELL ENVIRONMENT ===="

# Symlink shell aliases file
do-symlink $DOTFILES_PATH/env/.env_global ~/.env_global
do-symlink $DOTFILES_PATH/env/.env_dpac ~/.env_dpac

# Source in bash and zsh
do-source "bash" ~/.env_global
do-source "zsh"  ~/.env_global


if [[ -f /etc/arch-release ]]; then
    do-symlink $DOTFILES_PATH/env/.env_arch ~/.env_arch
    do-source "bash" ~/.env_arch
    do-source "zsh" ~/.env_arch
fi

echo-ok "Done"

#
# GIT
#
echo-custom " ** " "==== GIT CONFIG ===="
do-symlink $DOTFILES_PATH/git/.gitconfig ~/.gitconfig
echo-ok "Done"

#
# i3
#
echo-custom " ** " "==== i3 CONFIG ===="

# Symlink i3 configuration
do-symlink $DOTFILES_PATH/i3 ~/.config/i3
do-symlink $DOTFILES_PATH/i3blocks ~/.config/i3blocks

echo-ok "Done"

#
# Qtile
#
echo-custom " ** " "==== Qtile CONFIG ===="

# Symlink Qtile configuration
do-symlink $DOTFILES_PATH/qtile ~/.config/qtile

echo-ok "Done"


# Symlink rofi config
do-symlink $DOTFILES_PATH/rofi ~/.config/rofi

# xkblayout
mkdir -p ~/.local/bin/
cp $DOTFILES_PATH/bin/xkblayout-state ~/.local/bin/

#
# POLYBAR
#
echo-custom " ** " "==== POLYBAR ===="

# Scripts
do-clone "$DIR_PROJ"/polybar-scripts https://github.com/x70b1/polybar-scripts.git polybar-scripts
# Config
do-symlink $DOTFILES_PATH/polybar ~/.config/polybar

echo-ok "Done"


#
# X, URXVT, Termite, Kitty
#
echo-custom " ** " "==== X, URXVT, Termite ===="

mkdir -p ~/.urxvt/ext/
# .Xdefaults and .Xresources
XRES_H=$(xwininfo -root|sed '/Height/!d;s/.* //')
XRES_W=$(xwininfo -root|sed '/Width/!d;s/.* //')
MYHOSTNAME=$(hostname)
if [[ $XRES_H -gt 1400 ]] && [[ $XRES_W -gt 2000 ]] || [[ $MYHOSTAME == "hidalgo" ]]; then
    # HiDPI
    echo "HiDPI detected: xres=($XRES_W,$XRES_H), host=$MYHOSTNAME"
    do-symlink $DOTFILES_PATH/X/.Xresources-hidpi ~/.Xresources
    do-symlink $DOTFILES_PATH/X/.Xdefaults-hidpi ~/.Xdefaults
else
    # Regular
    echo "Normal DPI: xres=($XRES_W,$XRES_H), host=$MYHOSTNAME"
    do-symlink $DOTFILES_PATH/X/.Xdefaults ~/.Xdefaults
fi
# font-size urxvt plugin
do-symlink $DOTFILES_PATH/urxvt/font-size ~/.urxvt/ext/font-size
#Termite config
do-symlink $DOTFILES_PATH/termite ~/.config/termite
#Kitty config
do-symlink $DOTFILES_PATH/kitty ~/.config/kitty

echo-ok "Done"

#
# NCMPCPP
#
echo-custom " ** " " ==== NCMPCPP ===="
do-symlink $DOTFILES_PATH/ncmpcpp ~/.config/ncmpcpp
echo-ok "Done"

#
# MPD
#
echo-custom " ** " " ==== MPD ===="
do-symlink $DOTFILES_PATH/mpd/config ~/.config/mpd
do-symlink $DOTFILES_PATH/mpd/playlists ~/.local/share/mpd/playlists
echo-ok "Done"

#
# QUTEBROWSER
#
echo-custom " ** " "==== QUTEBROWSER ===="

QB_CONFIG=~/.config/qutebrowser
QB_DATA=~/.local/share/qutebrowser

# Symlink qutebrowser config
do-symlink $DOTFILES_PATH/qutebrowser/config $QB_CONFIG
# Symlink userscripts
do-symlink $DOTFILES_PATH/qutebrowser/data/userscripts $QB_DATA/userscripts
# Symlink greasemonkey js
do-symlink $DOTFILES_PATH/qutebrowser/data/greasemonkey $QB_DATA/greasemonkey

echo-ok "Done"


#
# DUNST
#
echo-custom " ** " "==== DUNST ===="
DIR_DUNST=~/.config/dunst
if [ ! -d "$DIR_DUNST" ]; then
    mkdir -p $DIR_DUNST
fi
do-symlink $DOTFILES_PATH/dunst/dunstrc $DIR_DUNST/dunstrc
echo-ok "Done"

#
# PYWAL
#
echo-custom " ** " "==== WAL ===="
do-clone "$DIR_PROJ"/pywal https://github.com/dylanaraps/pywal.git pywal
# Install pywal
echo-info "Installing pywal"
pip3 install --user "$DIR_PROJ"/pywal
echo-ok "Done"


#
# MPV
#
echo-custom " ** " "==== MPV ===="

MPV_CONFIG=~/.config/mpv
do-symlink $DOTFILES_PATH/mpv/scripts $MPV_CONFIG/scripts
echo-ok "Done"

#
# MUTT
#
echo-custom " ** " "==== MUTT ===="
mkdir -p $DOTFILES_PATH/mutt/ari.uni-heidelberg.de/cache
mkdir -p $DOTFILES_PATH/mutt/tonisagrista.com/cache
do-symlink $DOTFILES_PATH/mutt $DIR_MUTT
echo-ok "Done"

#
# CLI-VISUALIZER
#
echo-custom " ** " "==== CLI-VISUALIZER ===="
do-symlink $DOTFILES_PATH/vis $DIR_VISCONFIG
echo-ok "Done"

#
# NEWSBOAT
#
echo-custom " ** " "==== NEWSBOAT ===="
do-symlink $DOTFILES_PATH/newsboat $DIR_NEWSBOAT
echo-ok "Done"

# STARSHIP SHELL
echo-custom " ** " "==== STARSHIP ===="
do-symlink $DOTFILES_PATH/starship/starship.toml $DIR_STARSHIP/starship.toml
echo-ok "Done"



# Set keyboard repeat and delay - gnome or i3wm only
echo-custom " ** " "==== REPEAT DELAY 250 ms ===="
if [ "$XDG_CURRENT_DESKTOP" = "" ]
then
    desktop=$(echo "$XDG_DATA_DIRS" | sed 's/.*\(xfce\|kde\|gnome\).*/\1/')
else
    desktop=$XDG_CURRENT_DESKTOP
fi
desktop=${desktop,,}  # convert to lower case
if [ "$desktop" = "gnome" ]; then
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 20
    gsettings set org.gnome.desktop.peripherals.keyboard delay 250
    echo-ok "Repeat delay set for desktop: $desktop"
elif [ "$desktop" = "i3" ]; then
    echo-ok "Repeat interval and delay for $desktop set in ~/.config/i3/config"
else
    echo-fail "Not setting repeat interval for desktop: $desktop"
fi

#
# FONTS
#
echo-custom " ** " "==== FONTS ===="
do-symlink $DOTFILES_PATH/fonts/ttf ~/.local/share/fonts/ttf
fc-cache
echo-ok "Done"

# Done
echo ""
echo-ok "Done! Your environment should be ready to go"
