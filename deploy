#!/bin/bash

# VARIABLES ======================================

DOTFILES_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
DIR_GIT=~/git
DIR_VIMPLUGINS=~/.vim/bundle
DIR_RANGER=~/.config/ranger


# HELPERS ========================================

function echo-debug { echo "$@" | sed -e "s%$HOME%~%g" -e "s%$DOTFILES%.%g"; }
function echo-info  { printf "\r\033[2K\033[0;34m[ .. ]\033[0m %s\n" "$*"; }
function echo-skip  { printf "\r\033[2K\033[38;05;240m[SKIP]\033[0m %s\n" "$*"; }
function echo-ok    { printf "\r\033[2K\033[0;32m[ OK ]\033[0m %s\n" "$*"; }
function echo-fail { printf "\r\033[2K\033[0;31m[FAIL]\033[0m %s\n" "$*"; }
function echo-custom { printf "\n\r\033[2K\033[0;33m[$1]\033[0m %s\n" "$2"; }


# FUNCTIONS ======================================

# Clones a git repo to the target directory
# USAGE: do-clone targetdir url name
function do-clone {
    #echo-debug "    Folder: $1"
    #echo-debug "       URL: $2"
    #echo-debug "      Name: $3"
    if [ ! -d $1 ]; then
        echo-info "Installing $3"
        git clone $2 $1
        echo-ok "Done"
    elif [ -d $1/.git ]; then
        echo-info "Updating $3"
        git --work-tree=$1 --git-dir=$1/.git pull origin master
        echo-ok "Done"
    else
        echo-skip "$3"
    fi
}

# Pulls a file from curl and puts them into a specific location
# If the directory where target is does not exist, it is created
# USAGE: do-curl-fetchfile target url name
function do-curl-fetchfile {
    #echo-debug "    Target: $1"
    #echo-debug "       URL: $2"
    #echo-debug "      Name: $3"
    if [ ! -f $1 ]; then
        echo-info "Installing $3"
        LOCATION=$(dirname "${1}")
        mkdir -p "$LOCATION" 
        curl -LSso $1 $2
        echo-ok "Done"
    else
        echo-skip "$3"
    fi
}

# Does a symlink between target and link_name, deleting it if it exists
# USAGE: do-symlink target link_name
function do-symlink {
    #echo-debug "    Target: $1"
    #echo-debug " Link name: $2"
    echo-info "Symlink: $2 -> $1"
    # Remove link if exists
    if [ -L $2 ]; then
        rm $2
    fi
    if [ -d $2 ]; then
        rm -rf $2
    fi
    ln -s $1 $2
}

# Sources a shell file in the given shell's rc file, if it is not there yet
# USAGE: do-source shell file
function do-source {
    #echo-debug "      Shell: $1"
    #echo-debug "       File: $2"
    if [ -x "$(command -v $1)" ]; then
        CONF=~/.$1rc
        FILENAME=$(basename "$2")
        # If file not yet sourced, source it
        if ! grep -q $FILENAME $CONF
        then
            echo-info "$2: $CONF"
            echo -e "\n# Auto source $FILENAME\nif [ -f $2 ]; then\n\tsource $2\nfi" >> $CONF
        else
            echo-skip "$1"
        fi
    fi
}

# START ===================================

#
# VIM
#
echo-custom " ** " "==== VIM ===="

# Install pathogen if needed
do-curl-fetchfile ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim pathogen

# Install color schemes
do-clone ~/.vim/colors https://github.com/flazz/vim-colorschemes.git vim-colorschemes

# Install vim-surround
do-clone "$DIR_VIMPLUGINS"/vim-surround git://github.com/tpope/vim-surround.git vim-surround

# Install Ctrl-P
do-clone "$DIR_VIMPLUGINS"/ctrlp.vim https://github.com/ctrlpvim/ctrlp.vim.git CtrlP

# Install NERDTree
do-clone "$DIR_VIMPLUGINS"/nerdtree https://github.com/scrooloose/nerdtree.git NERDTree

# Install CSyntaxAfter
if [ ! -d ~/.vim/after/syntax ]; then
    echo-info "Installing CSyntaxAfter"
    curl -o csyntaxafter.zip https://www.vim.org/scripts/download_script.php?src_id=24609
    unzip csyntaxafter.zip -d ~/.vim/
    rm csyntaxafter.zip
    echo-ok "Done"
else
    echo-skip "CSyntaxAfter"
fi

# Install GLSL syntax
do-curl-fetchfile ~/.vim/syntax/glsl.vim https://raw.githubusercontent.com/tikhomirov/vim-glsl/master/syntax/glsl.vim vim-glsl

# Create .vimrc symlink
do-symlink $DOTFILES_PATH/vim/.vimrc ~/.vimrc

#
# RANGER
#
echo-custom " ** " "==== RANGER ===="

if [ ! -d "$DIR_RANGER" ]; then
    mkdir -p $DIR_RANGER
fi

# Create scope.sh and rc.conf symlinks
do-symlink $DOTFILES_PATH/ranger/scope.sh $DIR_RANGER/scope.sh
do-symlink $DOTFILES_PATH/ranger/rc.conf $DIR_RANGER/rc.conf


#
# SHELL ENVIRONMENT
#
echo-custom " ** " "==== SHELL ENVIRONMENT ===="

# Symlink shell aliases file
do-symlink $DOTFILES_PATH/env/.env_global ~/.env_global

# Source in bash and zsh
do-source "bash" ~/.env_global
do-source "zsh"  ~/.env_global


if [[ -f /etc/arch-release ]]; then
    do-symlink $DOTFILES_PATH/env/.env_arch ~/.env_arch
    do-source "bash" ~/.env_arch
    do-source "zsh" ~/.env_arch
fi

echo-ok "Done"

#
# GIT
#
echo-custom " ** " "==== GIT CONFIG ===="
do-symlink $DOTFILES_PATH/git/.gitconfig ~/.gitconfig
echo-ok "Done"

#
# i3
#
echo-custom " ** " "==== i3 CONFIG ===="

# Symlink i3 configuration
do-symlink $DOTFILES_PATH/i3 ~/.config/i3

# xkblayout
mkdir -p ~/.local/bin/
cp $DOTFILES_PATH/bin/xkblayout-state ~/.local/bin/

echo-ok "Done"

#
# POLYBAR
#
echo-custom " ** " "==== POLYBAR ===="

# Scripts
do-clone "$DIR_GIT"/polybar-scripts https://github.com/x70b1/polybar-scripts.git polybar-scripts

echo-ok "Done"

#
# X and URXVT
#
echo-custom " ** " "==== X and  urxvt ===="

mkdir -p ~/.urxvt/ext/
# xdefaults
XRES=$(xwininfo -root|sed '/Width/!d;s/.* //')
if [[ $XRES -gt 2000 ]]; then
    # HiDPI
    do-symlink $DOTFILES_PATH/X/.Xresources-hidpi ~/.Xresources
    do-symlink $DOTFILES_PATH/X/.Xdefaults-hidpi ~/.Xdefaults
else
    # Regular
    do-symlink $DOTFILES_PATH/X/.Xdefaults ~/.Xdefaults
fi
# font-size urxvt plugin
do-symlink $DOTFILES_PATH/urxvt/font-size ~/.urxvt/ext/font-size

echo-ok "Done"

#
# CLI-VISUALIZER
#
echo-custom " ** " "==== cli-vis ==="
do-symlink $DOTFILES_PATH/vis ~/.config/vis
echo-ok "Done"

#
# FONTS
#
echo-custom " ** " "==== FONTS ===="
do-symlink $DOTFILES_PATH/fonts ~/.fonts
echo-ok "Done"

#
# QUTEBROWSER
#
echo-custom " ** " "==== QUTEBROWSER ===="

QB_CONFIG=~/.config/qutebrowser
QB_DATA=~/.local/share/qutebrowser

# Symlink qutebrowser config
do-symlink $DOTFILES_PATH/qutebrowser $QB_CONFIG
# Symlink userscripts
do-symlink $DOTFILES_PATH/qutebrowser/data/userscripts $QB_DATA/userscripts
# Symlink greasemonkey js
do-symlink $DOTFILES_PATH/qutebrowser/data/greasemonkey $QB_DATA/greasemonkey

echo-ok "Done"


#
# PYWAL
#
echo-custom " ** " "==== WAL ===="
do-clone "$DIR_GIT"/pywal https://github.com/dylanaraps/pywal.git pywal
# Install pywal
echo-info "Installing pywal"
pip3 install --user "$DIR_GIT"/pywal
echo-ok "Done"

# Set keyboard repeat and delay - gnome or i3wm only
echo-custom " ** " "==== REPEAT DELAY 250 ms ===="
if [ "$XDG_CURRENT_DESKTOP" = "" ]
then
    desktop=$(echo "$XDG_DATA_DIRS" | sed 's/.*\(xfce\|kde\|gnome\).*/\1/')
else
    desktop=$XDG_CURRENT_DESKTOP
fi
desktop=${desktop,,}  # convert to lower case
if [ $desktop = "gnome" ]; then
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 20
    gsettings set org.gnome.desktop.peripherals.keyboard delay 250
    echo-ok "Repeat delay set for desktop: $desktop"
elif [ $desktop = "i3" ]; then
    echo-ok "Repeat interval and delay for $desktop set in ~/.config/i3/config"
else
    echo-fail "Not setting repeat interval for desktop: $desktop"
fi

# Done
echo ""
echo-ok "Done! Your environment should be ready to go"
