#!/bin/bash

# Script adapted from https://github.com/tallguyjenks/.dotfiles/blob/master/scripts/.local/bin/statusbar/battery

# Right click for more info
case $BLOCK_BUTTON in
    3) pgrep -x dunst >/dev/null && notify-send " Battery module" " : discharging
: not charging
: stagnant charge
: charging
: charged
: battery very low!
- Text color reflects charge left" ;;
esac

# Get current battery capacity/status from stdin or default BAT0
battery=/sys/class/power_supply/${1:-BAT0}

# Exit if no battery is found (desktop PCs)
[ ! -f $battery ] && exit -1

read -r capacity <"$battery/capacity"
read -r status   <"$battery/status"

# Set the color based on capacity
if [ "$capacity" -ge 85 ]; then
    color="#689d6a"
elif [ "$capacity" -ge 65 ]; then
    color="#fabd2f"
elif [ "$capacity" -ge 50 ]; then
    color="#d79921"
elif [ "$capacity" -ge 25 ]; then
    color="#d65d0e"
elif [ "$capacity" -ge 10 ]; then
    color="#cc241d"
else
    color="#fb4934"
    warn=" "
fi

# If battery below 10 but is now charging remove warning 
[ "$status" = "Charging" ] && warn=""

# If discharging and capacity below 10 then remove status  and replace with warning 
[ "$status" = "Discharging" ] && [ -n "$warn" ] && status=""

# if capacity is 0 and battery is not charging then change icon to empty battery and turn off warning
[ "$capacity" = 0 ] && [ "$status" = "Unknown" ] && status="" && warn=""

#status="${status//,/}"
status="${status/#Discharging/}"
status="${status/#Not Charging/}"
status="${status/#Charging/}"
status="${status/#Unknown/}"
status="${status/#Full/}"
status="${status} "

# Put it all together
printf "<span color='%s'>%s%s%s</span>\n" "$color" "$status" "$warn" "$capacity%"
